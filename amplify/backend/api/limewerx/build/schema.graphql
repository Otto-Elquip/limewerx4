
type Post {
  id: ID!
  name: String!
  description: String
  devices: [String!]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CanData {
  id: ID!
  deviceID: String!
  Signal: String!
  PhysicalValue: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Device {
  id: ID!
  CSSId: String!
  Location: String
  Vehicle: String
  isAcive: Boolean!
  PostID: String!
  DateActivated: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  devices: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getCanData(id: ID!): CanData
  listCanData(filter: ModelCanDataFilterInput, limit: Int, nextToken: String): ModelCanDataConnection
  getDevice(id: ID!): Device
  listDevices(filter: ModelDeviceFilterInput, limit: Int, nextToken: String): ModelDeviceConnection
}

input ModelPostConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  devices: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  name: String!
  description: String
  devices: [String!]
}

input UpdatePostInput {
  id: ID!
  name: String
  description: String
  devices: [String!]
}

input DeletePostInput {
  id: ID!
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createCanData(input: CreateCanDataInput!, condition: ModelCanDataConditionInput): CanData
  updateCanData(input: UpdateCanDataInput!, condition: ModelCanDataConditionInput): CanData
  deleteCanData(input: DeleteCanDataInput!, condition: ModelCanDataConditionInput): CanData
  createDevice(input: CreateDeviceInput!, condition: ModelDeviceConditionInput): Device
  updateDevice(input: UpdateDeviceInput!, condition: ModelDeviceConditionInput): Device
  deleteDevice(input: DeleteDeviceInput!, condition: ModelDeviceConditionInput): Device
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateCanData: CanData @aws_subscribe(mutations: ["createCanData"])
  onUpdateCanData: CanData @aws_subscribe(mutations: ["updateCanData"])
  onDeleteCanData: CanData @aws_subscribe(mutations: ["deleteCanData"])
  onCreateDevice: Device @aws_subscribe(mutations: ["createDevice"])
  onUpdateDevice: Device @aws_subscribe(mutations: ["updateDevice"])
  onDeleteDevice: Device @aws_subscribe(mutations: ["deleteDevice"])
}

type ModelCanDataConnection {
  items: [CanData]!
  nextToken: String
}

input ModelCanDataFilterInput {
  id: ModelIDInput
  deviceID: ModelStringInput
  Signal: ModelStringInput
  PhysicalValue: ModelStringInput
  and: [ModelCanDataFilterInput]
  or: [ModelCanDataFilterInput]
  not: ModelCanDataFilterInput
}

input ModelCanDataConditionInput {
  deviceID: ModelStringInput
  Signal: ModelStringInput
  PhysicalValue: ModelStringInput
  and: [ModelCanDataConditionInput]
  or: [ModelCanDataConditionInput]
  not: ModelCanDataConditionInput
}

input CreateCanDataInput {
  id: ID
  deviceID: String!
  Signal: String!
  PhysicalValue: String!
}

input UpdateCanDataInput {
  id: ID!
  deviceID: String
  Signal: String
  PhysicalValue: String
}

input DeleteCanDataInput {
  id: ID!
}

type ModelDeviceConnection {
  items: [Device]!
  nextToken: String
}

input ModelDeviceFilterInput {
  id: ModelIDInput
  CSSId: ModelStringInput
  Location: ModelStringInput
  Vehicle: ModelStringInput
  isAcive: ModelBooleanInput
  PostID: ModelStringInput
  DateActivated: ModelStringInput
  and: [ModelDeviceFilterInput]
  or: [ModelDeviceFilterInput]
  not: ModelDeviceFilterInput
}

input ModelDeviceConditionInput {
  CSSId: ModelStringInput
  Location: ModelStringInput
  Vehicle: ModelStringInput
  isAcive: ModelBooleanInput
  PostID: ModelStringInput
  DateActivated: ModelStringInput
  and: [ModelDeviceConditionInput]
  or: [ModelDeviceConditionInput]
  not: ModelDeviceConditionInput
}

input CreateDeviceInput {
  id: ID
  CSSId: String!
  Location: String
  Vehicle: String
  isAcive: Boolean!
  PostID: String!
  DateActivated: String!
}

input UpdateDeviceInput {
  id: ID!
  CSSId: String
  Location: String
  Vehicle: String
  isAcive: Boolean
  PostID: String
  DateActivated: String
}

input DeleteDeviceInput {
  id: ID!
}

